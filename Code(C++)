//Includes necessary "libraries"; allows my code to work
#include <iostream>
#include <array>
#include <vector>
#include <string>
using namespace std;

int choice;

//Populates an array with the values of the sudoku board to be solved
array<array<int, 9>, 9> presetBoard = {{{ 0, 3, 6, 0, 0, 4, 0, 8, 0 },
                                       { 9, 0, 0, 0, 0, 0, 0, 5, 0 },
                                       { 8, 0, 4, 0, 0, 1, 0, 6, 0 },
                                       { 0, 6, 0, 0, 9, 0, 4, 0, 0 },
                                       { 1, 0, 0, 0, 0, 0, 0, 0, 2 },
                                       { 0, 0, 7, 0, 6, 0, 0, 9, 0 },
                                       { 0, 4, 0, 6, 0, 0, 3, 0, 5 },
                                       { 0, 2, 0, 0, 0, 0, 0, 0, 7 },
                                       { 0, 1, 0, 4, 0, 0, 9, 2, 0 }}};

//User input array
array<array<int, 9>, 9> userInputSudoku() {
    array<array<int, 9>, 9> iB;
    cout << "Please enter all 81 values in row major order. For empty cells, input 0." << endl;
    for (int r = 0; r < 9; r++) {
        for (int c = 0; c < 9; c++) {
            cin >> iB[r][c];
        }
        cout << endl;
    }
    return iB;
}

//Determines which 3x3 sector the current cell is in
int find3x3(int rowOrCol) {
    if (((rowOrCol + 1) / 3.0) <= 1) {
        return 0;
    }
    else if (((rowOrCol + 1) / 3.0) > 2) {
        return 6;
    }
    else {
        return 3;
    }
}

//Finds an empty cell in the array 
array<int, 2> findEmptyCell(array<array<int, 9>, 9> board) {
   array<int, 2> rowAndCol = {{-1, -1}};
   
   for (int r = 0; r < 9; r++) {
        if (rowAndCol[0] != -1) {
            break;
        }
        for (int c = 0; c < 9; c++) {
            if (rowAndCol[0] != -1) {
                break;
            }
            if (board[r][c] == 0) {
                rowAndCol[0] = r;
                rowAndCol[1] = c;
            }
        }
    }

    return rowAndCol; 
}

//Determines whether a certain number (1-9) complies with the rules of the board
bool canFit(array<array<int, 9>, 9> board, int testNum, int row, int col) {
    //Test Row
    for (int i = 0; i < 9; i++) {
        if (board[row][i] == testNum) {
            return false;
        }
    }
    //Test Column
    for (int i = 0; i < 9; i++) {
        if (board[i][col] == testNum) {
            return false;
        }
    }
    //Test 3x3
    int r = find3x3(row);
    int c = find3x3(col);

    for (int i = r; i < (r + 3); i++) {
        for (int j = c; j < (c + 3); j++) {
            if (board[i][j] == testNum) {
                return false;
            }
        }
    }
    //Passed all conditions
    return true;
}

//Function that brings everything else together;
//Recursively calls itself until the board is solved or determined unsolvable
bool solvePuzzle(array<array<int, 9>, 9> board) {
    //Initializing variables
    array<array<int, 9>, 9> newArray = board; 
    vector<int> possibleValues { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };
    array<int, 2> rowAndColumn = findEmptyCell(board);
    int row = rowAndColumn[0];
    int col = rowAndColumn[1];

    //Checks if puzzle has been solved
    if (row == -1) {
        for (int r = 0; r < 9; r++) {
            for (int c = 0; c < 9; c++) {
                cout << board[r][c] << " ";
            }
            cout << endl;
        }

        return true;
    }

    //Loops until one of two conditions is met:
    //1)There are no empty cells left, meaning the board is solved
    //2)There are no possible values that comply with the rules of the board,
    //  meaning the board is unsolvable
    while (possibleValues[0] != 0) {
        if (canFit(board, possibleValues[0], row, col)) {
            newArray[row][col] = possibleValues[0];
            possibleValues.erase(possibleValues.begin());
            if (solvePuzzle(newArray)) {
                return true;
            }
        }
        else {
            possibleValues.erase(possibleValues.begin());
        }
    }

    return false;
}

int main() {
    //Asks the user which board to use and calls the functions needed to solve them
    do {
        cout << "If you would like to use a preset board, input 1. If you would like to use your own board, input 2." << endl;
        cin >> choice;
        if (choice == 1) {
            if (solvePuzzle(presetBoard)) {
                return 0;
            }
            else {
                cout << "This board can't be solved!";
                return 0;
            }
        }
        else if (choice == 2) {
            array<array<int, 9>, 9> inputBoard = userInputSudoku(); 
            if (solvePuzzle(inputBoard)) {
                return 0;
            }
            else {
                cout << "This board can't be solved!";
                return 0;
            }
        }
    } 
    while (choice != 1 && choice != 2);
}

